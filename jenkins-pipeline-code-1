pipeline {
    agent any 

    environment {
        AWS_ACCOUNT_ID     = credentials('ACCOUNT_ID')          // e.g., 141884504154
        AWS_ECR_REPO_NAME  = credentials('ECR_REPO_CFK')        // e.g., confluentinc/cp-server
        AWS_DEFAULT_REGION = 'ap-southeast-1'
        REPOSITORY_URI     = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        EKS_CLUSTER_NAME   = 'your-eks-cluster-name'            // üîÅ Replace with your actual cluster name
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from GitHub') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/awssrini/poc1.git'
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('kubernetes_manifests_files') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('kubernetes_manifests_files') {
                    sh 'trivy fs . | tee trivyfs.txt'
                }
            }
        }

stage('Trivy Image Scan') {
    steps {
        script {
            def imagesToScan = [
                "confluentinc/cp-server:7.7.1",
                "confluentinc/confluent-init-container:2.9.3",
                "confluentinc/cp-enterprise-control-center:7.7.1",
                "confluentinc/confluent-operator:0.1033.87"
            ]

            for (img in imagesToScan) {
                def fullImage = "${REPOSITORY_URI}/${img}"
                def safeName = img.replaceAll(/[/:]/, "_")
                echo "üîç Scanning image: ${fullImage}"
                sh "trivy image ${fullImage} | tee trivy_image_scan_${safeName}.txt"
            }
        }
    }
}

        stage('Connect to EKS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-JENKINS']]) {
                    sh '''
                    aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
                    '''
                }
            }
        }

        stage('Create Namespace & Install CFK Operator') {
            steps {
                sh '''
                kubectl create namespace confluent || true
                curl -O https://packages.confluent.io/bundle/cfk/confluent-for-kubernetes-2.9.3.tar.gz
                tar -xvzf confluent-for-kubernetes-2.9.3.tar.gz
                cd confluent-for-kubernetes-2.9.3-*/helm
                helm upgrade --install confluent-operator --namespace confluent confluent-for-kubernetes --set kRaftEnabled=true -f values.yaml
                '''
            }
        }

        stage('Deploy Confluent Kafka Manifests') {
            steps {
                dir('kubernetes_manifests_files') {
                    sh '''
                    kubectl apply -f 00-kraft.yaml
                    kubectl apply -f 01-kafka.yaml
                    '''
                }
            }
        }

        stage('Load Control Center Users') {
            steps {
                dir('kubernetes_manifests_files') {
                    sh 'sh load_c3_basic_users.sh'
                }
            }
        }

        stage('Deploy Control Center') {
            steps {
                dir('kubernetes_manifests_files') {
                    sh 'kubectl apply -f 02-controlcenter_basic.yaml'
                }
            }
        }
    }
}
